version: "3.8"

services:
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db-container
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
      MYSQL_DATABASE: aierpdb
      TZ: "Africa/Nairobi"
    ports:
      - "3307:3306" # Map to 3307 on host to avoid conflict with local MySQL if any
    volumes:
      - ./mysql-data:/var/lib/mysql
    networks:
      - erp-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-container
    environment:
      TZ: "Africa/Nairobi"
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: backend-container
    ports:
      - "8081:8081" # Matching server.port in application.properties
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/aierpdb?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=Africa/Nairobi&allowPublicKeyRetrieval=true
      DB_USERNAME: "${DB_USERNAME:-root}"
      DB_PASSWORD: "${DB_PASSWORD}"
      SPRING_RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: "${RABBITMQ_USERNAME:-guest}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD:-guest}"
      DYNAMICS_BC_USERNAME: "${DYNAMICS_BC_USERNAME}"
      DYNAMICS_BC_API_KEY: "${DYNAMICS_BC_API_KEY}"
      # Configure LLM service URL for Docker environment
      LLM_PYTHON_SERVICE_BASEURL: "http://gemini-python-service:8000"
      # Set timezone to fix time discrepancy
      TZ: "Africa/Nairobi"
    depends_on:
      mysql-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      gemini-python-service: # Added dependency on the new Python service
        condition: service_started # Or service_healthy if healthcheck is added
    networks:
      - erp-network

  gemini-python-service:
    build:
      context: ./src/gemini-python-service
      dockerfile: Dockerfile
    container_name: gemini-python-service-container
    ports:
      - "8001:8000" # Host port 8001 mapped to container port 8000
    environment:
      # Google Cloud Project Configuration
      GCP_PROJECT_ID: "${GCP_PROJECT_ID}"
      GCP_LOCATION: "${GCP_LOCATION}"
      GEMINI_MODEL_NAME: "${GEMINI_MODEL_NAME:-gemini-2.0-flash-001}"
      # Set timezone to fix time discrepancy
      TZ: "Africa/Nairobi"

      # Google Cloud Service Account Credentials
      GOOGLE_SERVICE_ACCOUNT_TYPE: "${GOOGLE_SERVICE_ACCOUNT_TYPE}"
      GOOGLE_SERVICE_ACCOUNT_PROJECT_ID: "${GOOGLE_SERVICE_ACCOUNT_PROJECT_ID}"
      GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY_ID: "${GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY_ID}"
      GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY: "${GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY}"
      GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL: "${GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL}"
      GOOGLE_SERVICE_ACCOUNT_CLIENT_ID: "${GOOGLE_SERVICE_ACCOUNT_CLIENT_ID}"
      GOOGLE_SERVICE_ACCOUNT_AUTH_URI: "${GOOGLE_SERVICE_ACCOUNT_AUTH_URI}"
      GOOGLE_SERVICE_ACCOUNT_TOKEN_URI: "${GOOGLE_SERVICE_ACCOUNT_TOKEN_URI}"
      GOOGLE_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL: "${GOOGLE_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL}"
      GOOGLE_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL: "${GOOGLE_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL}"
      GOOGLE_SERVICE_ACCOUNT_UNIVERSE_DOMAIN: "${GOOGLE_SERVICE_ACCOUNT_UNIVERSE_DOMAIN}"
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./src/Frontend
      dockerfile: Dockerfile
    container_name: frontend-container
    environment:
      TZ: "Africa/Nairobi"
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - erp-network

networks:
  erp-network:
    driver: bridge
