version: "3.8"

services:
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db-container
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
      MYSQL_DATABASE: aierpdb
    ports:
      - "3307:3306" # Map to 3307 on host to avoid conflict with local MySQL if any
    volumes:
      - ./mysql-data:/var/lib/mysql
    networks:
      - erp-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-container
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: backend-container
    ports:
      - "8081:8081" # Matching server.port in application.properties
    env_file:
      - .env

    depends_on:
      mysql-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      gemini-python-service: # Added dependency on the new Python service
        condition: service_started # Or service_healthy if healthcheck is added
    networks:
      - erp-network

  gemini-python-service:
    build:
      context: ./src/gemini-python-service
      dockerfile: Dockerfile
    container_name: gemini-python-service-container
    ports:
      - "8001:8000" # Host port 8001 mapped to container port 8000
    environment:
      MODEL_NAME: "${GEMINI_MODEL_NAME:-gemini-2.0-flash-001}"
      GOOGLE_APPLICATION_CREDENTIALS: "/app/secrets/service-account-key.json"
    volumes:
      - ./secrets/service-account-key.json:/app/secrets/service-account-key.json:ro
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./src/Frontend
      dockerfile: Dockerfile
    container_name: frontend-container
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - erp-network

networks:
  erp-network:
    driver: bridge
