from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional

class DocumentImage(BaseModel):
    image_base64: str = Field(description="Base64 encoded string of the document image.")
    mime_type: str = Field(default="image/png", description="MIME type of the image (e.g., image/png, image/jpeg).")

class IdentifierExtractionRequest(BaseModel):
    job_no: str
    document_type: str
    document_images: List[DocumentImage]

class VerificationRequest(BaseModel):
    job_no: str
    document_type: str
    document_images: List[DocumentImage]
    erp_data: Dict[str, Any] # Represents the structured BC data

class ClassificationRequest(BaseModel):
    job_no: str
    document_images: List[DocumentImage]

# New combined request schema
class ClassifyAndVerifyRequest(BaseModel):
    job_no: str
    document_images: List[DocumentImage]
    erp_data: Dict[str, Any] # Represents the structured BC data for all document types

class IdentifierExtractionResponse(BaseModel):
    extracted_identifiers: Dict[str, str] = Field(default_factory=dict)
    error_message: Optional[str] = None

class Discrepancy(BaseModel):
    field_name: str
    document_value: str
    erp_value: str
    severity: str = Field(default="medium")
    description: Optional[str] = None

class FieldConfidence(BaseModel):
    field_name: str
    confidence: float
    extracted_value: Optional[str] = None
    verified: bool = False

class VerificationResponse(BaseModel):
    discrepancies: List[Discrepancy] = Field(default_factory=list)
    field_confidences: List[FieldConfidence] = Field(default_factory=list)
    overall_verification_confidence: float = 0.0
    raw_llm_response: Optional[str] = None
    error_message: Optional[str] = None

class ClassificationResponse(BaseModel):
    document_type: str = Field(description="The classified document type (SalesQuote, ProformaInvoice, JobConsumption, or UNKNOWN)")
    confidence: float = Field(default=0.0, description="A confidence score between 0.0 and 1.0")
    reasoning: Optional[str] = Field(default=None, description="Brief explanation of why this classification was chosen")
    error_message: Optional[str] = None # Optional field for errors

# New combined response schema
class ClassifyAndVerifyResponse(BaseModel):
    document_type: str = Field(description="The classified document type (SalesQuote, ProformaInvoice, JobConsumption, or UNKNOWN)")
    classification_confidence: float = Field(default=0.0, description="A confidence score between 0.0 and 1.0 for classification")
    classification_reasoning: Optional[str] = Field(default=None, description="Brief explanation of why this classification was chosen")
    discrepancies: List[Discrepancy] = Field(default_factory=list)
    field_confidences: List[FieldConfidence] = Field(default_factory=list)
    overall_verification_confidence: float = 0.0
    raw_llm_response: Optional[str] = None
    error_message: Optional[str] = None
