package com.erp.aierpbackend.service;

import com.erp.aierpbackend.dto.dynamics.JobAttachmentLinksDTO;
import com.erp.aierpbackend.entity.JobDocument;
import com.erp.aierpbackend.repository.JobDocumentRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Pattern;

/**
 * Service for handling job attachments from Business Central and SharePoint.
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class JobAttachmentService {

    private final BusinessCentralService businessCentralService;
    private final SharePointService sharePointService;
    private final JobDocumentService jobDocumentService;
    private final JobDocumentRepository jobDocumentRepository;
    private final TemporaryDocumentStorageService tempDocumentStorageService;

    // Document type mapping patterns - expanded to catch more variations
    private static final Pattern SALES_QUOTE_PATTERN = Pattern.compile("(?i).*sales.*quote.*|.*quote.*|.*SQ.*|.*Sales.*|.*Quotation.*");
    private static final Pattern PROFORMA_INVOICE_PATTERN = Pattern.compile("(?i).*proforma.*invoice.*|.*invoice.*|.*PI.*|.*Proforma.*");
    private static final Pattern JOB_CONSUMPTION_PATTERN = Pattern.compile("(?i).*job.*shipment.*|.*job.*consumption.*|.*shipment.*|.*JC.*|.*Job.*|.*Consumption.*");

    // Document type constants
    public static final String SALES_QUOTE_TYPE = "SalesQuote";
    public static final String PROFORMA_INVOICE_TYPE = "ProformaInvoice";
    public static final String JOB_CONSUMPTION_TYPE = "JobConsumption";
    public static final String UNCLASSIFIED_TYPE = "UNCLASSIFIED";

    /**
     * Fetches job attachments from Business Central and downloads them from SharePoint.
     * Stores the documents in the database.
     * 
     * @deprecated Use fetchAndStoreJobAttachmentsTemporarily instead
     * @param jobNo The job number
     * @return Flux of downloaded document types
     */
    @Deprecated
    @Transactional(propagation = Propagation.REQUIRED)
    public Flux<String> fetchAndStoreJobAttachments(String jobNo) {
        log.info("Fetching and storing job attachments for Job No: '{}'", jobNo);
        log.warn("This method is deprecated. Use fetchAndStoreJobAttachmentsTemporarily instead.");
        
        // Delegate to the new method
        return fetchAndStoreJobAttachmentsTemporarily(jobNo);
    }
    
    /**
     * Fetches job attachments from Business Central and downloads them from SharePoint.
     * Stores the documents in temporary storage instead of the database.
     *
     * @param jobNo The job number
     * @return Flux of downloaded document types
     */
    @Transactional(propagation = Propagation.REQUIRED)
    public Flux<String> fetchAndStoreJobAttachmentsTemporarily(String jobNo) {
        log.info("Fetching and storing job attachments temporarily for Job No: '{}'", jobNo);

        // Special handling for job J069026 to diagnose issues
        if ("J069026".equals(jobNo)) {
            log.error("SPECIAL DIAGNOSTIC: Detected problematic job J069026");
        }

        log.info("Fetching attachment links from Business Central for Job No: {}", jobNo);
        return businessCentralService.fetchJobAttachmentLinks(jobNo)
                .doOnSuccess(links -> {
                    if (links == null) {
                        log.error("Business Central returned null for JobAttachmentLinks for Job No: {}", jobNo);
                    } else {
                        log.info("Business Central returned JobAttachmentLinks for Job No: {}, File_Links: '{}'",
                                jobNo, links.getFileLinks());
                    }
                })
                .doOnError(e -> {
                    log.error("Error fetching JobAttachmentLinks from Business Central for Job No: {}: {}",
                            jobNo, e.getMessage(), e);
                })
                .flatMapMany(attachmentLinks -> {
                    if (attachmentLinks == null) {
                        log.error("No attachment links found for Job No: {}. Business Central returned null.", jobNo);
                        return Flux.empty();
                    }

                    String[] sharePointUrls = attachmentLinks.getSharePointUrls();
                    if (sharePointUrls.length == 0) {
                        log.error("No SharePoint URLs found in attachment links for Job No: {}. Raw File_Links: '{}'",
                                jobNo, attachmentLinks.getFileLinks());
                        return Flux.empty();
                    }

                    log.info("Found {} SharePoint URLs for Job No: {}", sharePointUrls.length, jobNo);

                    // Filter and clean URLs
                    List<String> validUrls = new ArrayList<>();
                    for (String url : sharePointUrls) {
                        if (url != null && !url.trim().isEmpty() && url.contains("sharepoint.com")) {
                            // Clean up URL - remove any double-encoded spaces
                            String cleanUrl = url.replace("%2520", "%20");

                            // Fix specific issue with jOB%20SHIPMENT_124.pdf
                            if (cleanUrl.contains("jOB%2520SHIPMENT_124.pdf")) {
                                cleanUrl = cleanUrl.replace("jOB%2520SHIPMENT_124.pdf", "jOB%20SHIPMENT_124.pdf");
                                log.info("Fixed URL encoding for job shipment document: {}", cleanUrl);
                            }

                            // Log the URL for debugging
                            log.debug("Processing SharePoint URL: {}", cleanUrl);

                            validUrls.add(cleanUrl);
                            log.debug("Added valid URL: {}", cleanUrl);
                        } else {
                            log.warn("Filtered out invalid SharePoint URL for Job No: {}: '{}'", jobNo, url);
                        }
                    }

                    if (validUrls.isEmpty()) {
                        log.warn("No valid SharePoint URLs found after filtering for Job No: {}", jobNo);
                        return Flux.empty();
                    }

                    log.info("After filtering, found {} valid SharePoint URLs for Job No: {}: {}",
                            validUrls.size(), jobNo, String.join(", ", validUrls));

                    return Flux.fromIterable(validUrls)
                            .map(url -> {
                                log.debug("Processing SharePoint URL for Job No: {}: {}", jobNo, url);
                                return url;
                            })
                            .flatMap(url -> downloadAndStoreDocumentTemporarily(jobNo, url));
                })
                .onErrorResume(e -> {
                    log.error("Error fetching and storing job attachments for Job No: {}", jobNo, e);
                    return Flux.error(new RuntimeException("Failed to fetch and store job attachments for job " + jobNo, e));
                });
    }

    /**
     * Downloads a document from SharePoint and stores it in temporary storage.
     *
     * @param jobNo The job number
     * @param sharePointUrl The SharePoint URL
     * @return Mono containing the document type
     */
    private Mono<String> downloadAndStoreDocumentTemporarily(String jobNo, String sharePointUrl) {
        log.info("Processing document from SharePoint URL: {} for Job No: {}", sharePointUrl, jobNo);

        final String fileName = extractFileName(sharePointUrl);
        log.debug("Extracted file name: {} for Job No: {}", fileName, jobNo);

        // Store all documents as UNCLASSIFIED initially
        final String documentType = UNCLASSIFIED_TYPE;
        log.info("Storing document temporarily as UNCLASSIFIED for file: {} (Job No: {})", fileName, jobNo);

        log.info("Downloading document of type {} from SharePoint for Job No: {}", documentType, jobNo);

        return sharePointService.downloadFile(sharePointUrl)
                .flatMap(fileData -> {
                    log.info("Successfully downloaded document from SharePoint for Job No: '{}', Document Type: '{}', size: {} bytes",
                            jobNo, documentType, fileData.length);

                    // Store the document in temporary storage
                    String documentId = tempDocumentStorageService.storeDocument(
                            jobNo,
                            fileName,
                            determineContentType(fileName),
                            fileData,
                            sharePointUrl
                    );

                    log.info("Stored document temporarily with ID: {} for Job No: '{}', File Name: '{}'",
                            documentId, jobNo, fileName);

                    return Mono.just(documentType);
                })
                .onErrorResume(e -> {
                    // Log detailed error information for all download failures
                    log.error("Error downloading document from SharePoint URL: {} for Job No: {}", sharePointUrl, jobNo, e);
                    log.error("Detailed error information: Type={}, Message={}", e.getClass().getName(), e.getMessage());

                    // Return empty to continue with other URLs
                    return Mono.empty();
                });
    }

    /**
     * Extracts the file name from a SharePoint URL.
     *
     * @param sharePointUrl The SharePoint URL
     * @return The file name
     */
    public String extractFileName(String sharePointUrl) {
        if (sharePointUrl == null) {
            return "unknown.pdf";
        }

        // Extract the file name from the URL
        int lastSlashIndex = sharePointUrl.lastIndexOf('/');
        if (lastSlashIndex != -1 && lastSlashIndex < sharePointUrl.length() - 1) {
            String fileName = sharePointUrl.substring(lastSlashIndex + 1);
            
            // Handle URL-encoded characters
            fileName = fileName.replace("%20", " ");
            
            // Remove any query parameters
            int queryIndex = fileName.indexOf('?');
            if (queryIndex != -1) {
                fileName = fileName.substring(0, queryIndex);
            }
            
            return fileName;
        }
        
        return "unknown.pdf";
    }

    /**
     * Determines the content type based on the file name.
     *
     * @param fileName The file name
     * @return The content type
     */
    private String determineContentType(String fileName) {
        if (fileName == null) {
            return "application/octet-stream";
        }
        
        String lowerFileName = fileName.toLowerCase();
        if (lowerFileName.endsWith(".pdf")) {
            return "application/pdf";
        } else if (lowerFileName.endsWith(".jpg") || lowerFileName.endsWith(".jpeg")) {
            return "image/jpeg";
        } else if (lowerFileName.endsWith(".png")) {
            return "image/png";
        } else if (lowerFileName.endsWith(".tif") || lowerFileName.endsWith(".tiff")) {
            return "image/tiff";
        } else if (lowerFileName.endsWith(".doc")) {
            return "application/msword";
        } else if (lowerFileName.endsWith(".docx")) {
            return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
        } else if (lowerFileName.endsWith(".xls")) {
            return "application/vnd.ms-excel";
        } else if (lowerFileName.endsWith(".xlsx")) {
            return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        }
        
        return "application/octet-stream";
    }

    /**
     * Guesses the document type based on the file name.
     * This is a fallback method when LLM classification is not available.
     *
     * @param fileName The file name
     * @return The guessed document type
     */
    public String guessDocumentTypeFromFileName(String fileName) {
        if (fileName == null) {
            return UNCLASSIFIED_TYPE;
        }
        
        // Try to determine document type based on file name patterns
        if (SALES_QUOTE_PATTERN.matcher(fileName).matches()) {
            log.debug("File '{}' matched SALES_QUOTE pattern", fileName);
            return SALES_QUOTE_TYPE;
        } else if (PROFORMA_INVOICE_PATTERN.matcher(fileName).matches()) {
            log.debug("File '{}' matched PROFORMA_INVOICE pattern", fileName);
            return PROFORMA_INVOICE_TYPE;
        } else if (JOB_CONSUMPTION_PATTERN.matcher(fileName).matches()) {
            log.debug("File '{}' matched JOB_CONSUMPTION pattern", fileName);
            return JOB_CONSUMPTION_TYPE;
        }

        // If no pattern matched, try a more aggressive approach with contains
        String lowerFileName = fileName.toLowerCase();
        if (lowerFileName.contains("quote") || lowerFileName.contains("sq") || lowerFileName.contains("sales")) {
            log.debug("File '{}' contains SALES_QUOTE keywords", fileName);
            return SALES_QUOTE_TYPE;
        } else if (lowerFileName.contains("invoice") || lowerFileName.contains("pi") || lowerFileName.contains("proforma")) {
            log.debug("File '{}' contains PROFORMA_INVOICE keywords", fileName);
            return PROFORMA_INVOICE_TYPE;
        } else if (lowerFileName.contains("job") || lowerFileName.contains("jc") || lowerFileName.contains("shipment") ||
                   lowerFileName.contains("consumption")) {
            log.debug("File '{}' contains JOB_CONSUMPTION keywords", fileName);
            return JOB_CONSUMPTION_TYPE;
        }
        
        // Default to UNCLASSIFIED if no pattern matched
        log.debug("Could not determine document type from file name: {}", fileName);
        return UNCLASSIFIED_TYPE;
    }
}
